# Информация о проекте meta-lang-hub

## Цель проекта
Проект `meta-lang-hub` — это база универсальных паттернов кода для ИИ, оптимизированная для ускорения разработки и минимизации токенов. Основан на коде `ShortLinkBot_MAX` (Node.js, платформа MAX), который сокращает ссылки через сервисы (is.gd, TinyURL) и предоставляет статистику. ИИ использует базу для поиска паттернов, заменяет повторяющийся код (≥2 использования) индексами (e.g., `[js-cmd-handler]`), добавляет комментарии (e.g., `// [js-cmd-handler]`) для однократных использований. Поддерживает Node.js, с планами на Python, Go и другие языки. Проект исключительно для ИИ: люди не читают код напрямую, но могут добавлять/проверять паттерны.

### Контекст ShortLinkBot_MAX
`ShortLinkBot_MAX` — бот для платформы MAX, написанный на Node.js с использованием `@maxhub/max-bot-api`. Основные функции:
- **Сокращение ссылок**: Обработка сообщений с URL, вызов API (is.gd, TinyURL, псевдо-сокращение).  
- **Команды**: /start, /help, /stats для взаимодействия с пользователем.  
- **Статистика**: Хранение переходов в памяти (Map), вывод количества кликов, даты создания.  
- **Безопасность**: Валидация URL, таймауты, обработка ошибок.  
- **Файлы**: `bot.js` (логика бота), `shortener.js` (сокращение ссылок), `.env` (конфигурация), `package.json` (зависимости).  

Цель — выделить универсальные паттерны (e.g., обработка команд, парсинг сообщений) из `ShortLinkBot_MAX`, чтобы ИИ мог реюзать их в других проектах, экономя токены на генерацию и отладку.

## Гибридная архитектура
Проект использует гибридную архитектуру: центральный агрегатор (`meta-lang-hub`) и отдельные репо по языкам (`meta-lang-js`, позже `meta-lang-py`, etc.). Это баланс между масштабом и простотой: ИИ быстро ищет паттерны через `index-all.json`, минимизируя токены на парсинг, а изолированные репо упрощают добавление новых языков.

### Структура
```
meta-lang-hub/                  # Агрегатор для ИИ
├── README.md                  # Краткие инструкции для ИИ (на английском)
├── index-all.json             # Индексы всех паттернов (пути, теги, similar_to)
├── adapters/                  # Glue-код для кросс-языковой интеграции
│   ├── js-py-rest/            # Адаптер для связи Node.js и Python через REST
│   │   ├── index.json         # Метаданные адаптера
│   │   ├── code.js            # Код адаптера
│   │   ├── desc.md            # Краткое описание (1–2 строки, англ.)
│   │   ├── prompt.md          # Инструкции для ИИ (англ.)
│   │   └── tests.js           # Тесты для валидации
├── project-info-ru.md         # Этот файл, для команды, ИИ игнорирует
└── sources.md                 # Ссылки на языковые репо

meta-lang-js/                  # Репо для Node.js паттернов
├── cmd-handler/               # Паттерн обработки команд
│   ├── index.json             # Метаданные (тег, similar_to, comment)
│   ├── code.js                # Код (10–30 строк)
│   ├── desc.md                # Описание (1–2 строки, англ.)
│   ├── prompt.md              # Инструкции для ИИ (англ.)
│   └── tests.js               # Тесты
├── msg-handler/               # Паттерн обработки сообщений
├── shortlink-api/             # Паттерн интеграции с API
├── bot-init/                  # Паттерн инициализации бота

project/                       # Рабочий проект ИИ
├── dict/                      # Локальный словарь паттернов
│   ├── js-cmd-handler.json    # Копия паттерна при ≥2 использованиях
├── bot.js                     # Код с индексами ([js-cmd-handler])
```

### Как это работает
1. **Поиск**: ИИ парсит `meta-lang-hub/index-all.json` (~20 токенов), находит путь к паттерну (e.g., `meta-lang-js/cmd-handler`).  
2. **Генерация**:  
   - **Первый раз**: ИИ вставляет код из `code.js` с комментарием `// [js-cmd-handler]` (~30–50 токенов).  
   - **Второй раз**: Копирует паттерн в `project/dict/js-cmd-handler.json`, заменяет все вхождения (включая первое) на `[js-cmd-handler]` (~2 токена).  
   - **Один раз**: Код остаётся с комментарием `// [js-cmd-handler]`.  
3. **Отладка**: ИИ запускает `tests.js` (~20 токенов), проверяет зависимости (`index.json`), использует `prompt.md` для точной вставки.  
4. **Похожесть**: Поле `"similar_to"` в `index.json` (e.g., `["js-msg-handler"]`) предотвращает дублирование в `project/dict/`.

### Паттерны из ShortLinkBot_MAX
Выбраны 4 универсальных паттерна (частота ≥80% в мессенджер-ботах):  
1. **js-cmd-handler**: Обработка команд (/start, /help, /stats).  
   - Код: `bot.command('{COMMAND}', (ctx) => { ctx.reply('{RESPONSE}'); });`.  
   - Частота: ~95%.  
2. **js-msg-handler**: Парсинг сообщений (поиск URL).  
   - Код: Обработка `message_created` с валидацией URL.  
   - Частота: ~90%.  
3. **js-shortlink-api**: Интеграция с API сокращения ссылок.  
   - Код: Вызов axios для is.gd/TinyURL.  
   - Частота: ~50–70%.  
4. **js-bot-init**: Инициализация бота.  
   - Код: `const bot = new Bot(process.env.{TOKEN_VAR}); bot.start();`.  
   - Частота: ~80%.  

Паттерны хранятся в `meta-lang-js`, индексируются в `index-all.json`. Похожие паттерны (e.g., `js-cmd-handler` и `js-msg-handler`) помечены `"similar_to"`.

### Экономия токенов
- **Поиск**: `index-all.json` минимизирует парсинг (~20 токенов vs 100+ для полного репо).  
- **Генерация**: Индексы ([js-cmd-handler]) = ~2 токена vs ~30–50 за код.  
- **Отладка**: Тесты и `prompt.md` сокращают ошибки (~20 токенов vs 100–500).  
- Итог: ~90% экономии на генерации после второго использования.

## Как продолжить работу
1. **Добавление паттернов**:  
   - Создавайте папки в `meta-lang-js` (e.g., `new-pattern/`).  
   - Добавляйте `index.json`, `code.js`, `desc.md`, `prompt.md`, `tests.js`.  
   - Обновляйте `meta-lang-hub/index-all.json` с новым индексом.  
2. **Проверка похожести**:  
   - Указывайте `"similar_to"` в `index.json` для похожих паттернов.  
   - При необходимости используйте скрипт для анализа похожести (e.g., Levenshtein distance).  
3. **Тестирование**:  
   - Запускайте `tests.js` для каждого паттерна перед добавлением.  
   - Проверяйте зависимости в `index.json` (e.g., `"dependencies": ["axios>=1.6.0"]`).  
4. **Инструкции для ИИ**:  
   - Промпт: "Ищи паттерны в meta-lang-hub/index-all.json. Вставляй код с комментарием // [index] при первом использовании. При ≥2 копируй в project/dict/, замени все вхождения на [index]. Проверяй similar_to."  
5. **Расширение**:  
   - Добавляйте репо для других языков (e.g., `meta-lang-py`).  
   - Создавайте адаптеры в `meta-lang-hub/adapters/` для кросс-языковой интеграции (e.g., REST API для Node.js-Python).  

## Статус
- Репозиторий `meta-lang-hub` создан.  
- Добавлен `README.md` (на английском, для ИИ).  
- Добавлен `project-info-ru.md` (этот файл, для команды).  
- Следующий шаг: `index-all.json` с индексами паттернов (`js-cmd-handler`, etc.).  
- Планы: Создать `meta-lang-js`, добавить паттерны, настроить адаптеры.

## Заметки
- **Похожесть**: Используйте `"similar_to"` для исключения дублирования. Если нужно, добавим автоматическое сравнение (embeddings).  
- **Тестирование**: Тесты в `tests.js` обязательны для валидации паттернов.  
- **Масштабирование**: Гибридная архитектура поддерживает до 100+ языков (новые репо типа `meta-lang-py`).  
- **ShortLinkBot_MAX**: Код полностью разобран, паттерны выбраны по частоте и универсальности.